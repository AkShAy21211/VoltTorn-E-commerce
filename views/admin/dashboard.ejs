<%- include('../layout/adminHeader.ejs') %>
  <%- include('../layout/adminSideBar.ejs') %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



    <style>
      .revenue,
      .customer,
      .oders,
      .customer,
      .products {

        background-color: #007bff19;
      }
    </style>


    <title>Dashboard</title>
    <main class="ml-5">
      <section class="content-main container">
        <div class="content-header d-flex justify-content-between">
          <div>
            <h2 class="content-title">Dashboard</h2>
          </div>

          <div class="content-header d-flex justify-content-between">
            <div>
              <span for="reportType" class="form-label">Select Report Type:</span>
              <div style="display: inline-flex; gap: 10px;">
                <select style="width: 100px; height: 40px; " class="form-select" id="reportType">
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                <select style="width: 100px; height: 40px; " class="form-select" id="reportFormat">
                  <option value="pdf">PDF</option>
                  <option value="excel">Excel</option>
                </select>
                <butotn id="download-report"
                  style="width: 100px; height: 30px; text-align: center; padding: 10px; line-height: 10px;"
                  class="btn btn-primary">Download</button>

              </div>


            </div>

          </div>

        </div>





        <div class="row">
          <div class="col-lg-3">
            <div class="card revenue card-body mb-4 shadow-sm">
              <article class="icontext">
                <span class="icon icon-sm rounded-circle alert-primary"><i
                    class="text-primary fas fa-usd-circle"></i></span>
                <div class="text">
                  <h6 class="mb-1 ">Total Revenue</h6><b class="h5">â‚¹ </b>
                  <span class="h5" id="totalRevenue"></span>
                </div>
              </article>
            </div>
          </div>

          <div class="col-lg-3">
            <div class="card customer card-body mb-4 shadow-sm">
              <article class="icontext">
                <span class="icon icon-sm rounded-circle alert-success"><i
                    class="text-success fas fa-bags-shopping"></i></span>
                <div class="text">
                  <h6 class="mb-1">Total Customers</h6>
                  <span class="h5" id="totalCustomers"></span>
                </div>
              </article>
            </div>
          </div>

          <div class="col-lg-3">
            <div class="card oders card-body mb-4 shadow-sm">
              <article class="icontext">
                <span class="icon icon-sm rounded-circle alert-success"><i
                    class="text-success fas fa-bags-shopping"></i></span>
                <div class="text">
                  <h6 class="mb-1">Total Orders</h6>
                  <span class="h5" id="totalOders"></span>
                </div>
              </article>
            </div>
          </div>

          <div class="col-lg-3">
            <div class="card products card-body mb-4 shadow-sm">
              <article class="icontext">
                <span class="icon icon-sm rounded-circle alert-warning"><i
                    class="text-warning fas fa-shopping-basket"></i></span>
                <div class="text">
                  <h6 class="mb-1">Total Products</h6>
                  <span class="h5" id="totalProduct"></span>
                </div>
              </article>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-xl-6 col-lg-12">
            <div class="card mb-4 shadow-sm">
              <article class="card-body">
                <h5 class="card-title">Revnue statistics</h5>
                <label for="dateInput">Select range:</label>
                <select class="form-control w-25" id="revenueRange">
                  <!-- <option value="weekly">Weekly</option> -->
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                <canvas id="revenueChart" width="100%" height="80"></canvas>
              </article>
            </div>
          </div>

          <div class="col-xl-6 col-lg-12">
            <div class="card mb-4 shadow-sm">
              <article class="card-body">
                <h5 class="card-title">Sale statistics</h5>
                <label for="dateInput">Select range:</label>
                <select class="form-control w-25" id="saleRange">
                  <!-- <option value="weekly">Weekly</option> -->
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                <canvas id="saleChart" width="100%" height="80"></canvas>
              </article>
            </div>
          </div>

          <div class="col-xl-6 col-lg-12">
            <div class="card mb-4 shadow-sm">
              <article class="card-body">
                <h5 class="card-title">Category Products statistics</h5>
                <canvas id="categoryChart" width="100%" height="80"></canvas>
              </article>
            </div>
          </div>

          <div class="col-xl-6 col-lg-12">
            <div class="card mb-4 shadow-sm">
              <article class="card-body">
                <h5 class="card-title">Payment statistics</h5>
                <canvas id="paymentChart" width="100%" height="80"></canvas>
              </article>
            </div>
          </div>


        </div>


      </section>
    </main>




















    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const totalProduct = document.getElementById('totalProduct');
        const totalOders = document.getElementById('totalOders');
        const totalCustomers = document.getElementById('totalCustomers');
        const totalRevenue = document.getElementById('totalRevenue');
        let statisticsResponse;
        let revenueArray;
        let formattedYearlyRevenue;
        let salesArray;
        let formattedYearlySales;
        let categoryArray;
        let categoryNames;
        let Payment;

        async function getStatistics() {
          try {
            statisticsResponse = await axios.get("/admin/dashboard/statistics");
            totalProduct.innerText = statisticsResponse.data.totalProducts;
            totalOders.innerText = statisticsResponse.data.oderCount;
            totalCustomers.innerText = statisticsResponse.data.totalCustomers;
            totalRevenue.innerText = statisticsResponse.data.totalRevenue;



          } catch (error) {
            console.error(error);
          }

        }
        async function getRevenueData() {
          try {
            const statisticsResponse = await axios.get("/admin/dashboard/statistics");
            revenueArray = statisticsResponse.data.formattedMonthlyRevenue;
            formattedYearlyRevenue = statisticsResponse.data.formattedYearlyRevenue;


            // Default to monthly
            const labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            const revenueData = {
              labels: labels,
              datasets: [{
                label: "Revenue",
                data: revenueArray,
                backgroundColor: [
                  'rgba(255, 99, 132, 0.2)',

                ],
                hoverBackgroundColor: [
                  'rgb(255, 99, 132)',

                ],

                borderWidth: 1
              }]
            };

            const revenueconfig = {
              type: 'bar',
              data: revenueData,
              options: {
                scales: {
                  y: {
                    beginAtZero: true
                  }
                }
              },
            };

            var revenue = new Chart(document.getElementById('revenueChart'), revenueconfig);

            // Event listener for the dropdown change
            document.getElementById('revenueRange').addEventListener("change", (e) => {
              const isYearly = e.target.value === 'yearly';
              const isWeekly = e.target.value === 'weekly'
              const currentDate = new Date();
              const currentYear = currentDate.getFullYear();
              const currentMonth = currentDate.getMonth();

              const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
              const weeksInMonth = Math.ceil(daysInMonth / 7);

              const updatedLabels = isYearly
                ? Array.from({ length: currentYear - 2022 + 1 }, (_, index) => (2022 + index).toString())
                : isWeekly
                  ? Array.from({ length: weeksInMonth }, (_, index) => `Week ${index + 1}`)
                  : labels;



              revenueData.labels = updatedLabels;
              revenueData.datasets[0].data = isYearly ? formattedYearlyRevenue : revenueArray;
              revenue.update();
            });

          } catch (error) {
            console.error(error);
          }
        }



        async function getSalesData() {
          try {
            statisticsResponse = await axios.get("/admin/dashboard/statistics");
            salesArray = statisticsResponse.data.formattedMonthlySales;
            formattedYearlySales = statisticsResponse.data.formattedYearlySales;
            let labels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            const salesData = {
              labels: labels,
              datasets: [{
                label: "Sales",
                data: salesArray,
                backgroundColor: [
                  'rgba(255, 99, 132, 0.2)',

                ],
                hoverBackgroundColor: [
                  'rgb(255, 99, 132)',

                ],

                borderWidth: 1
              }]
            };

            // sales Chart  configuration
            const salesConfig = {
              type: 'bar',
              data: salesData,
              options: {
                scales: {
                  yAxes: [{
                    stacked: true,
                    gridLines: {
                      display: true,
                      color: "rgba(255,99,132,0.2)"
                    },
                    ticks: {
                      min: 0,
                      callback: function (value, index, values) {
                        if (Math.floor(value) === value) {
                          return value;
                        }
                      }
                    }
                  }],
                  y: {
                    beginAtZero: true
                  },

                }
              },
            };

            var sales = new Chart(document.getElementById('saleChart'), salesConfig);

            // Event listener for the dropdown change
            document.getElementById('saleRange').addEventListener("change", (e) => {
              const isYearly = e.target.value === 'yearly';
              const isWeekly = e.target.value === 'weekly'
              const currentDate = new Date();
              const currentYear = currentDate.getFullYear();
              const currentMonth = currentDate.getMonth();

              const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
              const weeksInMonth = Math.ceil(daysInMonth / 7);

              const updatedLabels = isYearly
                ? Array.from({ length: currentYear - 2022 + 1 }, (_, index) => (2022 + index).toString())
                : isWeekly
                  ? Array.from({ length: weeksInMonth }, (_, index) => `Week ${index + 1}`)
                  : labels;
              salesData.labels = updatedLabels;
              salesData.datasets[0].data = isYearly ? formattedYearlySales : salesArray;
              sales.update();
            });


          } catch (error) {
            console.error(error);

          }

        }




        //category dontocart

        async function getCategoryData() {
          try {
            statisticsResponse = await axios.get("/admin/dashboard/statistics");

            categoryArray = statisticsResponse.data.productCounts;
            categoryNames = statisticsResponse.data.categoryNames;
            const categorydata = {
              labels: categoryNames,
              datasets: [{
                data: categoryArray,
                backgroundColor: [
                  'rgba(255, 99, 132, 0.2)',
                  'rgba(255, 159, 64, 0.2)',
                  'rgba(255, 205, 86, 0.2)',
                  'rgba(75, 192, 192, 0.2)',

                ],
                borderColor: [
                  'rgb(255, 99, 132)',
                  'rgb(255, 159, 64)',
                  'rgb(255, 205, 86)',
                  'rgb(75, 192, 192)',

                ],
                hoverBackgroundColor: [
                'rgb(255, 99, 132)',
                  'rgb(255, 159, 64)',
                  'rgb(255, 205, 86)',
                  'rgb(75, 192, 192)',

                ],
                radius: 200,
                borderWidth: 1
              }]
            };

            //category chart configuration
            const categoryConfig = {
              type: 'pie',
              data: categorydata,
            };

            var category = new Chart(document.getElementById('categoryChart'), categoryConfig);



            category.update()

          } catch (error) {
            console.error(error);

          }

        }

        //category dontocart

        async function getPaymentData() {
          try {
            statisticsResponse = await axios.get("/admin/dashboard/statistics");

            onlinePayment = statisticsResponse.data.onlinePayment;
            cashPayment = statisticsResponse.data.cashPayment;
            payment = statisticsResponse.data.paymentModeCounts;

            const paymentData = {
              labels: ["Online", "Cash",],
              datasets: [{
                data: [payment[0].count, payment[1].count],
                backgroundColor: [
                  'rgba(255, 99, 132, 0.2)',
                  'rgba(255, 159, 64, 0.2)',
                  // 'rgba(255, 205, 86, 0.2)',

                ],
                borderColor: [
                  'rgb(255, 99, 132)',
                  'rgb(255, 159, 64)',
                  // 'rgb(255, 205, 86)',

                ],
                hoverBackgroundColor: [
                'rgb(255, 99, 132)',
                  'rgb(255, 159, 64)',

                ],
                
                radius: 200,
                borderWidth: 1
              }]
            };

            //category chart configuration
            const paymentConfig = {
              type: 'pie',
              data: paymentData,
            };

            var payment = new Chart(document.getElementById('paymentChart'), paymentConfig);



            payment.update()

          } catch (error) {
            console.error(error);

          }

        }
        getStatistics();

        getRevenueData();

        getSalesData();

        getCategoryData();

        getPaymentData();







      });
    </script>













    <script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.js"></script>

    <script>
      document.addEventListener("DOMContentLoaded", async (e) => {
        const reportTypeElement = document.getElementById('reportType');

        reportTypeElement.addEventListener("change", () => {
          const selectedReportType = reportTypeElement.value;

          console.log(selectedReportType);
          const reportFormat = document.getElementById('reportFormat');
          reportFormat.addEventListener("change", () => {


            const formatType = reportFormat.value;



            if (formatType === 'excel') {

              const reportDownload = document.getElementById('download-report').addEventListener("click", async (e) => {
                const response = await axios.get(`/admin/sales-report?reportType=${selectedReportType}`);
                const salesReport = response.data.salesReport;

                createAndDownloadExcel(salesReport);

              });
            } else {


              const reportDownload = document.getElementById('download-report').addEventListener("click", async (e) => {
                const response = await axios.get(`/admin/sales-report?reportType=${selectedReportType}`);
                const salesReport = response.data.salesReport;



                downloadPdfReport(salesReport);

              });
            }
          })
        });

        function createAndDownloadExcel(data) {
          const workbook = new ExcelJS.Workbook();
          const worksheet = workbook.addWorksheet('Sales Report');

          // Add headers
          worksheet.addRow(['Product Name', 'Quantity', 'Payment Mode', 'Total Amount']);

          // Add data
          data.forEach(entry => {
            worksheet.addRow([entry.productName, entry.quantity, entry.paymentMode, entry.totalAmount]);
          });

          // Save the workbook to a buffer
          workbook.xlsx.writeBuffer().then(buffer => {
            // Create a Blob from the buffer
            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

            // Create a link element and trigger a click event to download the file
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'sales_report.xlsx';
            link.click();
          });
        }




        function downloadPdfReport(data) {
          const pdfElement = document.createElement('div');
        const amountArray =  data.map((data)=>data.totalAmount);
        const subTotal = amountArray.reduce((pVal,cVal)=>pVal+cVal);


        pdfElement.innerHTML = `
  <table class="table">
    <tr>
      <td colspan="4" class="text-center">
        <h4>Sales Report</h4>
      </td>
    </tr>
    <tr>
      <td colspan="4">
        <div class="table">
          <!-- Header row with dark background -->
          <div class="row bg-dark text-white">
            <div class="col-5 text-left">Item</div>
            <div class="col-2 text-left">Quantity</div>
            <div class="col-2 text-left">PaymentMode</div>
            <div class="col text-left">Total</div>
          </div>

          <!-- Loop through each entry in the data -->
          ${data.map(entry => `
            <div class="row mb-4">
              <div class="col-5 text-left">${entry.productName}</div>
              <div class="col-2 text-left">${entry.quantity}</div>
              <div class="col-2 text-left">${entry.paymentMode}</div>
              <div class="col text-left">${entry.totalAmount}</div>
            </div>
          `).join('')}

        </div>
      </td>
    </tr>
    <tr>
      <td colspan="4" class="text-right">
        <h5>Subtotal: ${subTotal}</h5>
      </td>
    </tr>
  </table>`;

          // Use html2pdf to generate and download the PDF
          html2pdf(pdfElement, {
            margin: 10,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
          });
        }

      });
    </script>

    <%- include('../layout/adminFooter.ejs') %>